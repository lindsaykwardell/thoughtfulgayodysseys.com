---
// ReviewDialog component for book reviews
---

<dialog id="review-dialog" class="review-dialog">
  <div class="dialog-content">
    <div class="dialog-header">
      <h2 class="dialog-title">Write a Review for <em>Held</em></h2>
      <button
        class="close-button"
        onclick="closeReviewDialog()"
        aria-label="Close dialog"
      >
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M18 6L6 18M6 6L18 18"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>

    <form
      class="review-form"
      id="review-form"
      name="book-review"
      method="POST"
      data-netlify="true"
      data-netlify-honeypot="website"
    >
      <input type="hidden" name="form-name" value="book-review" />
      <div class="form-group">
        <label for="reviewer-name" class="form-label">Name</label>
        <input
          type="text"
          id="reviewer-name"
          name="name"
          required
          class="form-input"
          placeholder="Your name"
        />
      </div>

      <div class="form-group">
        <label for="reviewer-email" class="form-label">Email (optional)</label>
        <input
          type="email"
          id="reviewer-email"
          name="email"
          class="form-input"
          placeholder="your.email@example.com"
          pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
        />
      </div>

      <div class="form-group checkbox-group">
        <label class="checkbox-label">
          <input
            type="checkbox"
            name="public-permission"
            class="form-checkbox"
          />
          <span class="checkbox-text">
            I give permission to share this review publicly.
          </span>
        </label>
      </div>

      <div class="form-group">
        <label for="review-text" class="form-label">Your Review</label>
        <textarea
          id="review-text"
          name="review"
          required
          class="form-textarea"
          placeholder="Share your thoughts about the book..."
          rows="6"></textarea>
      </div>

      <!-- Hidden bot detection field -->
      <div class="hidden-field">
        <input
          type="text"
          name="website"
          tabindex="-1"
          autocomplete="off"
          style="position: absolute; left: -9999px;"
        />
      </div>

      <div class="form-actions">
        <button
          type="button"
          class="btn-secondary"
          onclick="closeReviewDialog()"
        >
          Cancel
        </button>
        <button type="submit" class="btn-primary"> Submit Review </button>
      </div>
      <div class="form-success">
        <p>Thank you for your review!</p>
      </div>
      <div class="form-error">
        <p>Something went wrong. Please try again.</p>
      </div>
    </form>
  </div>
</dialog>

<script>
  function openReviewDialog() {
    const dialog = document.getElementById(
      "review-dialog"
    ) as HTMLDialogElement;
    if (dialog) {
      // Prevent body scrolling
      document.body.style.overflow = "hidden";

      dialog.showModal();

      // Add opening animation class
      dialog.classList.add("dialog-opening");

      // Focus on the first input after animation
      setTimeout(() => {
        const firstInput = dialog.querySelector("input");
        if (firstInput) firstInput.focus();
      }, 300);
    }
  }

  function closeReviewDialog() {
    const dialog = document.getElementById(
      "review-dialog"
    ) as HTMLDialogElement;
    if (dialog) {
      // Add closing animation class
      dialog.classList.add("dialog-closing");

      // Wait for animation to complete before closing
      setTimeout(() => {
        dialog.close();
        dialog.classList.remove("dialog-opening", "dialog-closing");
        // Restore body scrolling
        document.body.style.overflow = "";

        // Reset the form
        const form = document.getElementById("review-form") as HTMLFormElement;
        if (form) {
          form.reset();
          // Enable the form
          form
            .querySelectorAll("input, textarea, button")
            .forEach(
              (
                input:
                  | HTMLInputElement
                  | HTMLTextAreaElement
                  | HTMLButtonElement
              ) => {
                input.disabled = false;
              }
            );
          // Remove the success and error messages
          const formSuccess = form.querySelector(
            ".form-success"
          ) as HTMLElement;
          const formError = form.querySelector(".form-error") as HTMLElement;
          if (formSuccess) formSuccess.style.display = "none";
          if (formError) formError.style.display = "none";
        }
      }, 200);
    }
  }

  // Handle form submission
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("review-form") as HTMLFormElement;
    if (form) {
      form.addEventListener("submit", function (e) {
        e.preventDefault();

        const formError = form.querySelector(".form-error") as HTMLElement;
        const formSuccess = form.querySelector(".form-success") as HTMLElement;
        if (formError) formError.style.display = "none";
        if (formSuccess) formSuccess.style.display = "none";

        const formData = new FormData(form);

        fetch("/", {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: new URLSearchParams(
            formData as unknown as Record<string, string>
          ).toString(),
        })
          .then(() => {
            // Disable form elements
            const inputs = form.querySelectorAll("input, textarea, button");
            inputs.forEach(
              (
                input:
                  | HTMLInputElement
                  | HTMLTextAreaElement
                  | HTMLButtonElement
              ) => {
                input.disabled = true;
              }
            );
            if (formSuccess) formSuccess.style.display = "block";
            if (formError) formError.style.display = "none";
          })
          .catch((error) => {
            if (formError) formError.style.display = "block";
            if (formSuccess) formSuccess.style.display = "none";
          });
      });
    }

    // Close dialog when clicking outside
    const dialog = document.getElementById("review-dialog");
    if (dialog) {
      dialog.addEventListener("click", function (e) {
        if (e.target === dialog) {
          closeReviewDialog();
        }
      });
    }
  });

  // Catch when someone presses escape to close the dialog
  document.addEventListener("keydown", function (e) {
    if (e.key === "Escape") {
      e.preventDefault();
      closeReviewDialog();
    }
  });

  // Make function globally available
  // @ts-ignore
  window.openReviewDialog = openReviewDialog;
  // @ts-ignore
  window.closeReviewDialog = closeReviewDialog;
</script>

<style scoped>
  .review-dialog {
    border: none;
    border-radius: 12px;
    padding: 0;
    background: transparent;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    max-width: 90vw;
    width: 500px;
    opacity: 0;
    transform: scale(0.9) translateY(-20px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .review-dialog.dialog-opening {
    opacity: 1;
    transform: scale(1) translateY(0);
  }

  .review-dialog.dialog-closing {
    opacity: 0;
    transform: scale(0.9) translateY(-20px);
  }

  .review-dialog::backdrop {
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .review-dialog[open]::backdrop {
    opacity: 1;
  }

  .dialog-content {
    background: white;
    border-radius: 12px;
    overflow: hidden;
  }

  .dialog-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 1.5rem 1rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .dialog-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #111827;
    margin: 0;
    font-family: inherit;
  }

  .close-button {
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .close-button:hover {
    background: #f3f4f6;
    color: #374151;
  }

  .review-form {
    padding: 1.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-label {
    display: block;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 0.875rem;
    transition:
      border-color 0.2s,
      box-shadow 0.2s;
    font-family: inherit;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #8b5cf6;
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
  }

  .checkbox-group {
    margin-bottom: 1.5rem;
  }

  .checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
  }

  .form-checkbox {
    margin: 0;
    width: 1rem;
    height: 1rem;
    accent-color: #8b5cf6;
  }

  .checkbox-text {
    font-size: 0.875rem;
    color: #4b5563;
    line-height: 1.4;
  }

  .form-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
    margin-top: 2rem;
  }

  .btn-primary,
  .btn-secondary {
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    font-family: inherit;
  }

  .btn-primary {
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
    color: white;
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #7c3aed 0%, #6d28d9 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
  }

  .btn-secondary {
    background: #f3f4f6;
    color: #374151;
  }

  .btn-secondary:hover {
    background: #e5e7eb;
  }

  .hidden-field {
    position: absolute;
    left: -9999px;
  }

  @media (max-width: 640px) {
    .review-dialog {
      width: 95vw;
      margin: 1rem;
    }

    .dialog-header,
    .review-form {
      padding: 1rem;
    }

    .form-actions {
      flex-direction: column;
    }

    .btn-primary,
    .btn-secondary {
      width: 100%;
    }
  }

  .form-success {
    display: none;
    background: #dcfce7;
    border: 1px solid #22c55e;
    color: #166534;
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
    text-align: center;
  }

  .form-error {
    display: none;
    background: #fef2f2;
    border: 1px solid #ef4444;
    color: #991b1b;
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
    text-align: center;
  }
</style>
