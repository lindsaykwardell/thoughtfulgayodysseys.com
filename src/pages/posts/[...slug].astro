---
import BaseHead from "@/components/BaseHead.astro";
import Footer from "@/components/global/Footer.astro";
import { ISbRichtext, useStoryblokApi } from "@storyblok/astro";
import Post from "@/storyblok/Post.astro";
import Signature from "@/components/Signature.astro";
import PostCard from "@/components/PostCard.astro";

const slug = Astro.params.slug;

const storyblokApi = useStoryblokApi();

type Post = {
  name: string;
  created_at: string;
  published_at: string;
  first_published_at: string;
  id: number;
  uuid: string;
  content: {
    _uid: string;
    tags: string[];
    content: ISbRichtext;
    summary: string;
    component: "post";
    sideImage: {
      id: number;
      filename: string;
    };
    coverImage: {
      id: number;
      filename: string;
    };
  };
  slug: string;
  full_slug: string;
};

const allPosts: Post[] = await storyblokApi.getAll("cdn/stories", {
  version: import.meta.env.STORYBLOK_MODE,
});

const { data } = await storyblokApi.get(`cdn/stories/${slug}`, {
  content_type: "post",
  version: import.meta.env.STORYBLOK_MODE,
});

const blok = data.story;

const postsByYear = allPosts
  .filter((post) => post.content.tags?.includes(blok.name))
  .toSorted(
    (a, b) =>
      new Date(b.first_published_at ?? b.created_at).getTime() -
      new Date(a.first_published_at ?? a.created_at).getTime()
  )
  .reduce(
    (byYear, post) => {
      const year = new Date(post.first_published_at ?? post.created_at)
        .getFullYear()
        .toString();
      if (!byYear[year]) {
        byYear[year] = [];
      }

      byYear[year].push(post);

      return byYear;
    },
    {} as { [key: string]: Post[] }
  );

const backToTitle = allPosts.find(
  (post) => post.name.includes(blok.content?.tags?.[0])
)?.name || "Posts";

const backToUrl = allPosts.find(
  (post) => post.name.includes(blok.content?.tags?.[0])
)?.slug || "/posts";
---

<html lang="en">
  <head>
    <BaseHead />
  </head>
  <body
    class="bg-gradient-to-b from-[#FCAB20] to-white flex flex-col min-h-screen"
  >
    <a href={backToUrl} class="p-4"> ‚Üê Back to {backToTitle} </a>
    <main class="flex-grow">
      <Post blok={blok} />
    </main>
    <ul id="posts" class="w-full max-w-[1400px] m-auto">
      {Object.entries(postsByYear).toSorted((a,b) => +b[0] - +a[0]).map(([year, posts]) => (
          <li transition:name={year} class="font-title text-2xl text-stone-800 py-8 pl-8">{year}</li>
          <ul class="flex flex-row flex-wrap">
              {posts.map(post => (
                  <li transition:name={`${post.slug}-name`} class="text-lg md:text-xl w-full md:w-1/2 xl:w-1/3">
                      <div class="p-2">
                        <PostCard img={post.content.coverImage?.filename} url={`/posts/${post.slug}`}>
                          <div slot="title" class="flex items-end">
                            <div class="flex-grow flex items-end gap-3">
                              <h3 class="font-display">{post.name}</h3>
                            </div>
                            <time class="text-sm text-stone-800">{Intl.DateTimeFormat('en-us').format(new Date(post.first_published_at ?? post.created_at))}</time>
                          </div>
                        </PostCard>
                      </div>
                  </li>
              ))}
          </ul>
      ))}
    </ul>
    <Signature avatarSize="md" />
    <Footer />
  </body>
</html>
