---
import PostCard from "@/components/PostCard.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { ISbRichtext, useStoryblokApi } from "@storyblok/astro";

const storyblokApi = useStoryblokApi();
const tag = Astro.params.tag;

type Post = {
  name: string;
  created_at: string;
  published_at: string;
  first_published_at: string;
  id: number;
  uuid: string;
  content: {
    _uid: string;
    tags: string[];
    content: ISbRichtext;
    summary: string;
    component: "post";
    sideImage: {
      id: number;
      filename: string;
    };
    coverImage: {
      id: number;
      filename: string;
    };
  };
  slug: string;
  full_slug: string;
};

const data: Post[] = await storyblokApi.getAll("cdn/stories", {
  version: import.meta.env.STORYBLOK_MODE,
});

// Sort posts by date in descending order (newest first)
const postsByYear = data
  .filter(post => post.content.tags?.includes(tag))
  .toSorted(
    (a, b) =>
      new Date(b.first_published_at ?? b.created_at).getTime() - new Date(a.first_published_at ?? a.created_at).getTime()
  )
  .reduce(
    (byYear, post) => {
      const year = new Date(post.first_published_at ?? post.created_at).getFullYear().toString();
      if (!byYear[year]) {
        byYear[year] = [];
      }

      byYear[year].push(post);

      return byYear;
    },
    {} as { [key: string]: Post[] }
  );
---

<BaseLayout>
  <section class="sticky top-0 w-full z-20">
    <div class="mx-auto max-w-7xl">
      <div class="text-center pt-20 pb-10 z-30 relative">
        <h1
          class="text-4xl tracking-tight text-balance font-medium font-display text-black md:text-8xl"
        >
          Thoughtful Gay Oddysseys
        </h1>
      </div>
    </div>
  </section>
  <ul id="posts" class="w-full max-w-[1400px] m-auto">
    {Object.entries(postsByYear).toSorted((a,b) => +b[0] - +a[0]).map(([year, posts]) => (
        <li transition:name={year} class="font-title text-2xl text-stone-800 py-8 pl-8">{year}</li>
        <ul class="flex flex-row flex-wrap">
            {posts.map(post => (
                <li transition:name={`${post.slug}-name`} class="text-lg md:text-xl w-full md:w-1/2 xl:w-1/3">
                    <div class="p-2">
                      <PostCard img={post.content.coverImage?.filename} url={`/posts/${post.slug}`}>
                        <div slot="title" class="flex items-end">
                          <div class="flex-grow flex items-end gap-3">
                            <h3 class="font-display">{post.name}</h3>
                          </div>
                          <time class="text-sm text-stone-800">{Intl.DateTimeFormat('en-us').format(new Date(post.first_published_at ?? post.created_at))}</time>
                        </div>
                      </PostCard>
                    </div>
                </li>
            ))}
        </ul>
    ))}
  </ul>
  <!-- <Cta /> -->
</BaseLayout>

<script>
const elementsToLoadIn = document.querySelectorAll("#poem p");
const posts = document.querySelector("#posts");

// elementsToLoadIn.forEach((el) => {
//  el.classList.add('loadin');
// });

const observerOptions = {
 root: null,
 rootMargin: '0px',
 threshold: 1,
};

function observerCallback(entries) {
 entries.forEach((entry) => {
  if (entry.isIntersecting) {
   entry.target.classList.add('loaded');
  }
 });
}

const observer = new IntersectionObserver(observerCallback, observerOptions);

setTimeout(() => {
  elementsToLoadIn.forEach((el) => observer.observe(el));
  observer.observe(posts);
}, 500);

</script>